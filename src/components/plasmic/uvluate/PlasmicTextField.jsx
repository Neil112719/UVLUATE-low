// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4uR12v7QrPwop4VtjZSzHQ
// Component: 8nEVF5xBj7fT
import * as React from "react";
import {
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { BaseTextField } from "@plasmicpkgs/react-aria/skinny/registerTextField";
import Label from "../../Label"; // plasmic-import: nyiDjvcaZII_/component
import TextInput from "../../TextInput"; // plasmic-import: VCcx4RaM4_jV/component
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: 144eFL9ZZtbM/component
import Description from "../../Description"; // plasmic-import: p5tKZ8xmXkDB/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4uR12v7QrPwop4VtjZSzHQ/projectcss
import sty from "./PlasmicTextField.module.css"; // plasmic-import: 8nEVF5xBj7fT/css
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: GARLzpY0mMK0/icon

createPlasmicElementProxy;

export const PlasmicTextField__VariantProps = new Array(
  "multiLine",
  "iconStart",
  "iconEnd"
);

export const PlasmicTextField__ArgProps = new Array(
  "placeholder",
  "showLabel",
  "showDescription",
  "defaultValue",
  "disabled",
  "readOnly",
  "autoFocus",
  "type",
  "inputMode",
  "autoComplete",
  "ariaLabel",
  "onChange",
  "label",
  "start",
  "end",
  "description"
);

const $$ = {};

function PlasmicTextField__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          showLabel: true,
          showDescription: false,
          readOnly: false,
          autoFocus: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "ariaTextField.value",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props["defaultValue"],
        onChangeProp: "onChange"
      },
      {
        path: "multiLine",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.multiLine
      },
      {
        path: "iconStart",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconStart
      },
      {
        path: "iconEnd",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconEnd
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const [$ccVariants, setDollarCcVariants] = React.useState({
    disabled: false,
    readonly: false
  });
  const updateVariant = React.useCallback(changes => {
    setDollarCcVariants(prev => {
      if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
        return prev;
      }
      return { ...prev, ...changes };
    });
  }, []);
  return (
    <BaseTextField
      data-plasmic-name={"ariaTextField"}
      data-plasmic-override={overrides.ariaTextField}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      autoComplete={args.autoComplete}
      autoFocus={args.autoFocus}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
        sty.ariaTextField,
        {
          [sty.ariaTextFieldiconEnd]: hasVariant($state, "iconEnd", "iconEnd"),
          [sty.ariaTextFieldiconEnd_iconStart]:
            hasVariant($state, "iconStart", "iconStart") &&
            hasVariant($state, "iconEnd", "iconEnd"),
          [sty.ariaTextFieldiconStart]: hasVariant(
            $state,
            "iconStart",
            "iconStart"
          ),
          [sty.ariaTextFieldmultiLine]: hasVariant(
            $state,
            "multiLine",
            "multiLine"
          )
        }
      )}
      defaultValue={args.defaultValue}
      inputMode={args.inputMode}
      isDisabled={args.disabled}
      isReadOnly={args.readOnly}
      onChange={async (...eventArgs) => {
        generateStateOnChangeProp($state, ["ariaTextField", "value"]).apply(
          null,
          eventArgs
        );
      }}
      plasmicUpdateVariant={updateVariant}
      type={args.type}
      value={generateStateValueProp($state, ["ariaTextField", "value"])}
    >
      {$props.showLabel ? (
        <Label
          data-plasmic-name={"label"}
          data-plasmic-override={overrides.label}
          className={classNames("__wab_instance", sty.label, {
            [sty.labelmultiLine]: hasVariant($state, "multiLine", "multiLine")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: <Trans__>{"Label"}</Trans__>,
            value: args.label
          })}
        </Label>
      ) : null}
      <div
        className={classNames(projectcss.all, sty.freeBox__roU5I, {
          [sty.freeBoxiconEnd__roU5I17Ngf]: hasVariant(
            $state,
            "iconEnd",
            "iconEnd"
          ),
          [sty.freeBoxiconStart__roU5Ip8Ckn]: hasVariant(
            $state,
            "iconStart",
            "iconStart"
          ),
          [sty.freeBoxmultiLine__roU5Idt5XN]: hasVariant(
            $state,
            "multiLine",
            "multiLine"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__bUuoA, {
            [sty.freeBoxiconStart__bUuoAp8Ckn]: hasVariant(
              $state,
              "iconStart",
              "iconStart"
            ),
            [sty.freeBoxmultiLine__bUuoAdt5XN]: hasVariant(
              $state,
              "multiLine",
              "multiLine"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <CircleIcon
                className={classNames(projectcss.all, sty.svg__yz2Ik)}
                role={"img"}
              />
            ),

            value: args.start,
            className: classNames(sty.slotTargetStart, {
              [sty.slotTargetStarticonStart]: hasVariant(
                $state,
                "iconStart",
                "iconStart"
              )
            })
          })}
        </div>
        <TextInput
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput}
          className={classNames("__wab_instance", {
            [sty.textInputmultiLine]: hasVariant(
              $state,
              "multiLine",
              "multiLine"
            )
          })}
          disabled={$ccVariants["disabled"] ? true : undefined}
          onChange={async (...eventArgs) => {
            generateStateOnChangeProp($state, ["textInput", "value"]).apply(
              null,
              eventArgs
            );
            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          padded={
            hasVariant($state, "iconStart", "iconStart") &&
            hasVariant($state, "iconEnd", "iconEnd")
              ? ["right", "left"]
              : hasVariant($state, "iconEnd", "iconEnd")
              ? ["right"]
              : hasVariant($state, "iconStart", "iconStart")
              ? ["left"]
              : undefined
          }
          placeholder={args.placeholder}
        />

        {(hasVariant($state, "multiLine", "multiLine") ? true : false) ? (
          <TextAreaInput
            data-plasmic-name={"textAreaInput"}
            data-plasmic-override={overrides.textAreaInput}
            className={classNames("__wab_instance", {
              [sty.textAreaInputmultiLine]: hasVariant(
                $state,
                "multiLine",
                "multiLine"
              )
            })}
            onChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "textAreaInput",
                "value"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            padded={
              hasVariant($state, "iconStart", "iconStart") &&
              hasVariant($state, "iconEnd", "iconEnd")
                ? ["right", "left"]
                : hasVariant($state, "iconEnd", "iconEnd")
                ? ["right"]
                : hasVariant($state, "iconStart", "iconStart")
                ? ["left"]
                : undefined
            }
            placeholder={args.placeholder}
          />
        ) : null}
        <div
          className={classNames(projectcss.all, sty.freeBox__slPxE, {
            [sty.freeBoxiconEnd__slPxE17Ngf]: hasVariant(
              $state,
              "iconEnd",
              "iconEnd"
            ),
            [sty.freeBoxiconStart__slPxEp8Ckn]: hasVariant(
              $state,
              "iconStart",
              "iconStart"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <CircleIcon
                className={classNames(projectcss.all, sty.svg__h5Q5R)}
                role={"img"}
              />
            ),

            value: args.end,
            className: classNames(sty.slotTargetEnd)
          })}
        </div>
      </div>
      {$props.showDescription ? (
        <Description
          data-plasmic-name={"description"}
          data-plasmic-override={overrides.description}
          className={classNames("__wab_instance", sty.description)}
        >
          {renderPlasmicSlot({
            defaultContents: <Trans__>{"Description..."}</Trans__>,
            value: args.description
          })}
        </Description>
      ) : null}
    </BaseTextField>
  );
}

const PlasmicDescendants = {
  ariaTextField: [
    "ariaTextField",
    "label",
    "textInput",
    "textAreaInput",
    "description"
  ],

  label: ["label"],
  textInput: ["textInput"],
  textAreaInput: ["textAreaInput"],
  description: ["description"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTextField__ArgProps,
          internalVariantPropNames: PlasmicTextField__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTextField__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ariaTextField") {
    func.displayName = "PlasmicTextField";
  } else {
    func.displayName = `PlasmicTextField.${nodeName}`;
  }
  return func;
}

export const PlasmicTextField = Object.assign(
  // Top-level PlasmicTextField renders the root element
  makeNodeComponent("ariaTextField"),
  {
    // Helper components rendering sub-elements
    label: makeNodeComponent("label"),
    textInput: makeNodeComponent("textInput"),
    textAreaInput: makeNodeComponent("textAreaInput"),
    description: makeNodeComponent("description"),
    // Metadata about props expected for PlasmicTextField
    internalVariantProps: PlasmicTextField__VariantProps,
    internalArgProps: PlasmicTextField__ArgProps
  }
);

export default PlasmicTextField;
/* prettier-ignore-end */
